<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>All Expenses - Expense Tracker</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 25px;
      background-color: #899bbe;
    }
    .container {
      max-width: 800px;
      margin: 50px auto;
      padding: 20px;
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    h1, h2 {
      text-align: center;
    }
    .filter-options {
      text-align: center;
      margin-bottom: 20px;
    }
    .filter-options button {
      padding: 8px 20px;
      margin: 0 10px;
      background-color: #3e6fa4;
      color: #fff;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.3s;
    }
    .filter-options button:hover {
      background-color: #0056b3;
    }
    .date-range-filter {
      text-align: center;
      margin-bottom: 20px;
    }
    .date-range-filter input[type="date"] {
      padding: 8px;
      margin: 0 10px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    .date-range-filter button {
      padding: 8px 20px;
      background-color: #3e6fa4;
      color: #fff;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.3s;
    }
    .date-range-filter button:hover {
      background-color: #0056b3;
    }
    table {
      width: 100%;
      border-collapse: collapse;
    }
    table th, table td {
      padding: 10px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }
    th {
      background-color: #3e6fa4;
      color: #fff;
    }
    tbody tr:nth-child(even) {
      background-color: #f2f2f2;
    }
    tbody tr:hover {
      background-color: #e2e2e2;
    }
    .actions-cell button {
      padding: 6px 12px;
      background-color: #dc3545;
      color: #fff;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.3s;
    }
    .actions-cell button:hover {
      background-color: #c82333;
    }
    .expensesTable {
      overflow: scroll;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>All Expenses</h1>
    <h2>Your Expenses, <%= user.name %></h2>
<hr>
    <!-- Filter options -->
    <div class="filter-options" style="display: grid;
    gap: 10px;">
      <button onclick="filterByDate()">Filter by Date</button>
      <button onclick="filterByCategory()">Filter by Category</button>
      <button onclick="filterByAmount('asc')">Sort Amount Ascending</button>
      <button onclick="filterByAmount('desc')">Sort Amount Descending</button>
    </div>

    <!-- Date Range Filter -->
    <div class="date-range-filter" style="display: grid;
    grid-template-columns: 1fr 1fr; /* Two equal columns for mobile devices */
    gap: 10px;">
      <label for="fromDate">From:</label>
      <input type="date" id="fromDate" name="fromDate">
      <label for="toDate">To:</label>
      <input type="date" id="toDate" name="toDate">
      <button onclick="filterByDateRange()">Search</button>
    </div>

    <div id="expensesTable" class="expensesTable">
      <table>
        <thead>
          <tr>
            <th>Date</th>
            <th>Category</th>
            <th>Description</th>
            <th>Amount</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="expensesTableBody">
          <% if (expenses.length === 0) { %>
            <tr>
              <td colspan="5">No expenses found.</td>
            </tr>
          <% } else { %>
            <% expenses.forEach(expense => { %>
              <tr>
                <td><%= new Date(expense.created_at).toLocaleDateString() %></td>
                <td><%= expense.category %></td>
                <td><%= expense.description %></td>
                <td><%= expense.amount %></td>
                <td class="actions-cell">
                  <button onclick="deleteExpense('<%= expense._id %>')">Delete</button>
                </td>
              </tr>
            <% }) %>
          <% } %>
        </tbody>
      </table>
    </div>
  </div>

  <script>
    let currentFilter = ""; // To keep track of the current filter

    async function filterByDate() {
      try {
        const response = await fetch(`/allexpenses/filterByDate`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ user_id: "<%= user._id %>" }),
        });
        if (!response.ok) {
          throw new Error("Failed to fetch expenses by date");
        }
        const expenses = await response.json();
        displayExpenses(expenses);
        currentFilter = "date";
      } catch (error) {
        console.error(error);
      }
    }

    async function filterByCategory() {
      try {
        const response = await fetch(`/allexpenses/filterByCategory`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ user_id: "<%= user._id %>" }),
        });
        if (!response.ok) {
          throw new Error("Failed to fetch expenses by category");
        }
        const expenses = await response.json();
        displayExpenses(expenses);
        currentFilter = "category";
      } catch (error) {
        console.error(error);
      }
    }

    async function filterByAmount(sortOrder) {
      try {
        const response = await fetch(`/allexpenses/filterByAmount`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ user_id: "<%= user._id %>", sortOrder }),
        });
        if (!response.ok) {
          throw new Error("Failed to sort expenses by amount");
        }
        const expenses = await response.json();
        displayExpenses(expenses);
        currentFilter = `amount-${sortOrder}`;
      } catch (error) {
        console.error(error);
      }
    }

    async function filterByDateRange() {
      const fromDate = document.getElementById("fromDate").value;
      const toDate = document.getElementById("toDate").value;
      
      try {
        const response = await fetch(`/allexpenses/filterByDateRange`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ fromDate, toDate }),
        });
        if (!response.ok) {
          throw new Error("Failed to fetch expenses by date range");
        }
        const expenses = await response.json();
        displayExpenses(expenses);
        currentFilter = "dateRange";
      } catch (error) {
        console.error(error);
      }
    }

    function displayExpenses(expenses) {
      const expensesTableBody = document.getElementById("expensesTableBody");
      expensesTableBody.innerHTML = ""; // Clear previous content

      if (expenses.length === 0) {
        expensesTableBody.textContent = "No expenses found.";
      } else {
        expenses.forEach((expense) => {
          const row = expensesTableBody.insertRow();
          const date = new Date(expense.created_at).toLocaleDateString();
          row.innerHTML = `<td>${date}</td><td>${expense.category}</td><td>${expense.description}</td><td>${expense.amount}</td>`;

          const actionsCell = row.insertCell();
          const deleteButton = document.createElement("button");
          deleteButton.textContent = "Delete";
          deleteButton.onclick = () => deleteExpense(expense._id);
          actionsCell.appendChild(deleteButton);
        });
      }
    }

    async function deleteExpense(expenseId) {
      try {
        const response = await fetch(`/deleteExpense`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ id: expenseId }),
        });
        if (!response.ok) {
          throw new Error("Failed to delete expense");
        }
        const result = await response.json();
        if (result.success) {
          if (currentFilter === "date") {
            filterByDate();
          } else if (currentFilter === "category") {
            filterByCategory();
          } else if (currentFilter === "dateRange") {
            filterByDateRange();
          } else if (currentFilter === "amount") {
            filterByAmount();            
          } else {
            location.reload();
          }
          alert("Expense deleted successfully");
        } else {
          throw new Error("Failed to delete expense");
        }
      } catch (error) {
        console.error(error);
        alert("Failed to delete expense");
      }
    }
  </script>
</body>
</html>
